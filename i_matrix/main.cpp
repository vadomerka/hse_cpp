
/*
 * Разработать класс Матрица, который удовлетворяет следующим требованиям:
 * 1) Для представления элементов матрицы будем использовать наиболее компактное.
 * 2) Используем правильное управление ресурсами (памятью): 
 *  - Распределение
 *  - Освобождение
 *  - Глубокое копирование
 * 3) Добавляем операционную семантику, ожидаемую для математического 
 * объекта Матрица (сложение, умножение, транспонирование, проверка 
 * на равенство/неравенство)
 *  - Сделаем перегрузку операторов...
 * 4) Для представления составных элементов матрицы (столбцы, строки)
 * создадим легковесные обертки, которые можно будет передавать по значению
 * (аналогия с итераторами и string_view). Не забываем про константность
 * 5) Добавляем в матрицу умение быть хорошо воспитанным контейнером: 
 * Итераторы, begin'ы, end'ы и тд.
 * 6) Научим матрицу быть перемещаемым объектом (НЛО)
 * 7) Сделаем матрицу шаблоном, чтобы это была матрица произвольных объектов
 * (Матрица T)
 * Требования и ограничения
 * a) Будем тестировать матрицу обычными assert'ами
 */

#include <iostream>
#include <cassert>

#include "matrix.h"

void test01() {
  assert(true);
}

int main() {
  test01();
  std::cout << "assert test.";
  return 0;
}
